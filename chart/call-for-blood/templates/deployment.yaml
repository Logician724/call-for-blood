apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app.kubernetes.io/name: {{ include "call-for-blood.name" . }}
    helm.sh/chart: {{ include "call-for-blood.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "call-for-blood.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  stategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "call-for-blood.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.servicePort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            requests:
              cpu: "{{ .Values.image.resources.requests.cpu }}"
              memory: "{{ .Values.image.resources.requests.memory }}"
          env:
            - name: MONGO_URL
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-configmap"
                  key: mongoUrl
            - name: PORT
              value: "{{ .Values.service.servicePort }}"
            - name: SECRET
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-configmap"
                  key: sessionSecret
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}=configmap"
                  key: nodeEnv
            - name: SIGNUP_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-configmap"
                  key: signupEndpoint
            - name: LOGIN_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: "{{ .Chart.Name }}-configmap"
                  key: loginEndpoint
